find.package("devtools")
install.packages("devtools")
library(devtools)
search()
find_rtools()
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
getwd()
pwd
getpwd()
getwd()
cd
setwd(..)
setwd(.)
setwd(\)
setwd(/)
pollutantmean<-function(directory, pollutant, i=1:332){
pollutantmean<-function(directory, pollutant, i=1:332){
sadf
}
View(pollutantmean)
View(pollutantmean)
getwd()
xor(!isTRUE(TRUE),6>-1)
library(swirl)
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units = 'days')
difftime(Sys.time(),t1,units = "days")
exit()
quit()
?rowMeans
rnorm(10)
x<-rnorm(10)
x
f1<-lm(2,5)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
>split
?split
df <-data.frame(x=rnorm(25),y=rnorm(25),g=rep(LETTERS[1:5],5))
head(df,4)
head(df,14)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
sapply(flags,class)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
1:10
1:10
A:Z
LETTERS
flag_shapes<-flags[,19:23]
lapply(flags,range)
lapply(flags_shapes,range)
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
head(flag_shapes)
class(shape_mat)
unique(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(installr)
library("installr")
packages()
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
install.packages("dplyr")
library(swirl)
swirl()
swirl()
read.csv(path2csv,stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US" | country =="IN")
filter(cran,size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = .99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class, count, male_2, female_2)
res <- gather(students2,sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
?mutate
submit()
students4
submit()
?unique
submit()
submit()
passed
passed
failed
mutate(passed,"status"="passed")
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
?separate
submit()
submit()
?group_by
submit()
install.packages("RMySQL", type)
install.packages("RMySQL", type="source")
q()
getwd()
setwd("C:\Users\ctsuser1\datasciencecoursera\DataCleaning\Programming Assignment")
setwd("../datasciencecoursera/DataCleaning/Programming Assignment")
source("run_analysis.R")
write.table(master_data_summary,file = "Tidy_Summary_Data.txt", row.names = FALSE)
